#!/usr/bin/env python3
"""
TAQWIN TOWER - SYSTEM VALIDATION TEST
Quick test to verify all systems are working
Author: TAQWIN (The Strengthener)
Version: 1.0
"""

import sys
import os
from pathlib import Path

# Add python-systems to path
sys.path.insert(0, str(Path(__file__).parent))

def test_task_processor():
    """Test task management system"""
    print("🔄 Testing Task Management System...")
    
    try:
        from task_management.task_processor import TaqwinTaskProcessor, TaskPriority
        
        processor = TaqwinTaskProcessor()
        
        # Create a test task
        task_id = processor.create_task(
            title="System Test Task",
            description="Testing automated task assignment and processing",
            priority=TaskPriority.HIGH,
            assigned_by="SYSTEM_TEST"
        )
        
        # Check pending tasks
        pending = processor.get_pending_tasks()
        
        # Update progress
        processor.update_task_progress(task_id, 100, "Test completed successfully")
        
        print(f"✅ Task Processor: Created {task_id}, {len(pending)} pending tasks")
        return True
        
    except Exception as e:
        print(f"❌ Task Processor Error: {e}")
        return False

def test_agent_master():
    """Test agent automation system"""
    print("🔄 Testing Agent Master System...")
    
    try:
        from agent_automation.taqwin_agent_master import TaqwinAgentMaster
        
        master = TaqwinAgentMaster()
        master.initialize_system()
        
        # Execute sample tasks
        master._execute_monitoring_tasks()
        master._execute_intelligence_tasks()
        master._execute_operations_tasks()
        
        # Check system status
        status = master.get_system_status()
        
        print(f"✅ Agent Master: {status['active_agents']} agents across {status['total_floors']} floors")
        return True
        
    except Exception as e:
        print(f"❌ Agent Master Error: {e}")
        return False

def verify_file_structure():
    """Verify required file structure exists"""
    print("🔄 Verifying File Structure...")
    
    required_paths = [
        "D:\\Ethereal Glow\\TAQWIN_TOWER\\OFFICE_INVENTORY",
        "D:\\Ethereal Glow\\TAQWIN_TOWER\\OFFICE_INVENTORY\\AGENT_WORK_LOGS",
        "D:\\Ethereal Glow\\TAQWIN_TOWER\\OFFICE_INVENTORY\\KNOWLEDGE_DATABASE",
        "D:\\Ethereal Glow\\TAQWIN_TOWER\\OFFICE_INVENTORY\\TASKS_COMPLETED"
    ]
    
    missing_paths = []
    for path in required_paths:
        if not Path(path).exists():
            missing_paths.append(path)
    
    if missing_paths:
        print(f"❌ Missing paths: {missing_paths}")
        return False
    else:
        print("✅ File Structure: All required directories exist")
        return True

def count_generated_files():
    """Count files generated by the system"""
    print("🔄 Counting Generated Files...")
    
    try:
        inventory_path = Path("D:\\Ethereal Glow\\TAQWIN_TOWER\\OFFICE_INVENTORY")
        
        # Count agent logs
        agent_logs = list((inventory_path / "AGENT_WORK_LOGS").rglob("*_LOG.json"))
        
        # Count tasks
        task_files = list((inventory_path / "TASKS_COMPLETED").rglob("TASK*.json"))
        
        # Count knowledge database files
        knowledge_files = list((inventory_path / "KNOWLEDGE_DATABASE").rglob("*.json"))
        
        print(f"✅ Generated Files:")
        print(f"   📋 Agent Logs: {len(agent_logs)}")
        print(f"   📊 Task Files: {len(task_files)}")
        print(f"   🧠 Knowledge Files: {len(knowledge_files)}")
        
        return len(agent_logs) > 0 and len(task_files) > 0
        
    except Exception as e:
        print(f"❌ File Count Error: {e}")
        return False

def test_data_integrity():
    """Test data integrity in generated files"""
    print("🔄 Testing Data Integrity...")
    
    try:
        import json
        
        # Test an agent log file
        agent_log_path = Path("D:\\Ethereal Glow\\TAQWIN_TOWER\\OFFICE_INVENTORY\\AGENT_WORK_LOGS")
        if agent_log_path.exists():
            for log_file in agent_log_path.rglob("*_LOG.json"):
                with open(log_file, 'r') as f:
                    data = json.load(f)
                    if not all(key in data for key in ["agent_name", "department", "tasks_completed"]):
                        print(f"❌ Invalid agent log structure: {log_file}")
                        return False
                break  # Test just one file
        
        # Test a task file (skip index and report files)
        task_path = Path("D:\\Ethereal Glow\\TAQWIN_TOWER\\OFFICE_INVENTORY\\TASKS_COMPLETED")
        if task_path.exists():
            for task_file in task_path.rglob("TASK*.json"):
                # Skip index and report files
                if task_file.name in ["task_index.json", "task_report.json"]:
                    continue
                    
                with open(task_file, 'r') as f:
                    data = json.load(f)
                    if not all(key in data for key in ["task_id", "title", "status", "assigned_agents"]):
                        print(f"❌ Invalid task structure: {task_file}")
                        return False
                break  # Test just one file
        
        print("✅ Data Integrity: All tested files have valid structure")
        return True
        
    except Exception as e:
        print(f"❌ Data Integrity Error: {e}")
        return False

def main():
    """Run complete system validation"""
    print("🌟 TAQWIN TOWER - SYSTEM VALIDATION TEST")
    print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    
    tests = [
        ("File Structure", verify_file_structure),
        ("Task Processor", test_task_processor),
        ("Agent Master", test_agent_master),
        ("Generated Files", count_generated_files),
        ("Data Integrity", test_data_integrity)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            print()  # Add spacing
        except Exception as e:
            print(f"❌ {test_name} FAILED: {e}")
            print()
    
    print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print(f"🏆 VALIDATION RESULTS: {passed}/{total} tests passed")
    
    if passed == total:
        print("🎉 ALL SYSTEMS OPERATIONAL - TAQWIN TOWER READY FOR DEPLOYMENT")
        print("🚀 Run 'python start_taqwin_office.py' to start autonomous operations")
    else:
        print("⚠️  Some tests failed - check errors above")
    
    print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")

if __name__ == "__main__":
    main()
